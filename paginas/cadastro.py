import streamlit as st
from paginas.controlador import load_users, save_users, create_user, delete_user, edit_user

def show_registration():
    # Verifica se o usu√°rio est√° logado e se √© um admin
    if st.session_state.get('logged_in') and st.session_state.get('username') == 'admin':
        show_cadastro()
    else:
        # Se n√£o for admin ou n√£o estiver logado, mostra mensagem apropriada
        st.warning("Voc√™ n√£o tem permiss√£o para acessar esta p√°gina, jovem padawan.")
        if not st.session_state.get('logged_in'):
            st.info("Por favor, fa√ßa login para acessar a p√°gina de administra√ß√£o.")

def show_cadastro():
    users = load_users()  # Carregar usu√°rios no in√≠cio
    #st.write(users)  # Debug: mostrar os usu√°rios carregados

    # Colunas para t√≠tulo e bot√£o
    col1, col2 = st.columns([5, 1])
    col1.title("Administra√ß√£o de Usu√°rios")
    
    if col2.button("‚ûï", key="add_user"):
        st.session_state.show_add_user = not st.session_state.get('show_add_user', False)
        #st.write("Mostrar se√ß√£o de adicionar usu√°rio:", st.session_state.show_add_user)  # Debug

    # Se√ß√£o para adicionar novo usu√°rio
    if st.session_state.get('show_add_user', False):
        st.subheader("Adicionar novo usu√°rio")

        # Criando duas colunas para Nome de Usu√°rio e Email
        col1, col2 = st.columns(2)
        new_username = col1.text_input("Nome do usu√°rio", key="new_username")
        new_email = col2.text_input("Email", key="new_email")

        # Criando tr√™s colunas para Senha, Idade e Role
        col3, col4, col5 = st.columns(3)
        new_password = col3.text_input("Senha", type="password", key="new_password")  # Senha
        new_idade = col4.number_input("Idade", min_value=0, key="new_idade")  # Idade
        new_role = col5.selectbox("Role", ["common", "admin"], index=0)  # Role com "common" como primeira op√ß√£o

        if st.button("Criar Usu√°rio"):
            if create_user(users, new_username, new_email, new_password, new_idade, new_role):
                save_users(users)
                st.success(f"Usu√°rio {new_username} criado com sucesso!")
            else:
                st.error("Usu√°rio j√° existe!")

    # Cabe√ßalho da tabela
    st.write("### Usu√°rios cadastrados:")
    col1, col2, col3, col4, col5 = st.columns([1, 2, 2, 1, 1])
    col1.write("ID")
    col2.write("Nome")
    col3.write("Cargo")
    col4.write("Editar")
    col5.write("Deletar")
    st.write("---")

    # Lista para armazenar usu√°rios a serem deletados
    users_to_delete = []

    # Tabela com Usu√°rios
    for username, details in users.items():
        col1, col2, col3, col4, col5 = st.columns([1, 2, 2, 1, 1])
        col1.write(details["id"])
        col2.write(details["nome"])
        col3.write(details["role"])  # Mostra o nome do cargo
        
        editar_coluna = col4.button(f"‚úèÔ∏è", key=f"edit_{username}")
        deletar_coluna = col5.button(f"üóëÔ∏è", key=f"delete_{username}")

        if editar_coluna:
            st.session_state.editing_user = username

        # L√≥gica de dele√ß√£o
        if deletar_coluna:
            users_to_delete.append(username)  # Adiciona o usu√°rio √† lista de deletar

    # Realiza a dele√ß√£o ap√≥s o loop
    for username in users_to_delete:
        if delete_user(users, username):  # Tenta deletar o usu√°rio
            save_users(users)  # Salva as mudan√ßas no arquivo JSON
            st.success(f"Usu√°rio {username} deletado com sucesso!")
        else:
            st.error("Erro ao deletar o usu√°rio.")

    # Formul√°rio de edi√ß√£o
    if 'editing_user' in st.session_state:
        editing_user = st.session_state.editing_user
        user_details = users[editing_user]

        st.write(f"### Editando usu√°rio: {editing_user}")

        # Primeira linha: Nome e Email
        col1, col2 = st.columns(2)
        new_name = col1.text_input("Nome do usu√°rio", value=user_details["nome"], key="edit_name")
        new_email = col2.text_input("Email", value=user_details["email"], key="edit_email")

        # Segunda linha: Senha, Idade e Role
        col3, col4, col5 = st.columns(3)
        new_password = col3.text_input("Senha", type="password", key="edit_password")
        new_age = col4.number_input("Idade", min_value=0, value=user_details["idade"], key="edit_age")
        new_role = col5.selectbox("Role", ["admin", "common"], index=0 if user_details["role"] == "admin" else 1, key="edit_role")

        # Atualizar usu√°rio
        if st.button("Salvar altera√ß√µes"):
            if edit_user(users, editing_user, new_name, new_email, new_password, new_age, new_role):
                save_users(users)
                st.success(f"Usu√°rio {editing_user} atualizado com sucesso!")
                del st.session_state.editing_user  # Limpar o estado de edi√ß√£o
            else:
                st.error("Erro ao atualizar o usu√°rio.")
